from aiogram import types
from aiogram.types.web_app_info import WebAppInfo
from aiogram.dispatcher import FSMContext
from aiogram.types.message import ContentType
from aiogram.dispatcher.filters.state import State, StatesGroup
from random import choice
from loader import dp, bot
from meta import WEB_APP, MESSAGE, CARDS, PASSWORD
from TOKEN import PAYMENTS_TOKEN
import database

# –°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥
PRICE = types.LabeledPrice(label = "8 –∑–∞–Ω—è—Ç–∏–π", amount = 6800*100)  # –≤ –∫–æ–ø–µ–π–∫–∞—Ö (—Ä—É–±)
PRICE2 = types.LabeledPrice(label = "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫—É—Ä–∞—Ç–æ—Ä–∞", amount = 0)
PRICE3 = types.LabeledPrice(label = "–ó–∞—â–∏—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞", amount = 0)
class Registration(StatesGroup):
    phone_registration = State()
    fullname_registration = State()

class TeacherRegistration(StatesGroup):
    name = State()

class AssignTeacher(StatesGroup):
    student = State()
    end = State()

class FinishLesson(StatesGroup):
    complete = State()
    about = State()

@dp.message_handler(commands=["cancel"], state="*")
@dp.callback_query_handler(text="cancel", state="*")
async def cancel(message, state: FSMContext):
    print(0)
    await state.finish()
    await bot.send_message(message.from_user.id, "–ì–∞–ª—è! –£ –Ω–∞—Å –æ—Ç–º–µ–Ω–∞üíÉ")

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
# ---------------------------------------------------
# –û–¢–ú–ï–ù–ê
@dp.message_handler(text = ["–û—Ç–º–µ–Ω–∞"], state=[Registration.phone_registration, Registration.fullname_registration])
async def cancel(message: types.Message, state: FSMContext):
    keyboard = [[types.KeyboardButton("–ü–æ—Å–µ—Ç–∏—Ç—å –Ω–∞—à —Å–∞–π—Çüòä", web_app=WebAppInfo(url=WEB_APP))],
                [types.KeyboardButton("–í–æ–π—Ç–∏\–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")]]
    markup = types.ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)
    await state.finish()
    await bot.send_message(message.from_user.id, "–û—Ç–º–µ–Ω—è–µ–ºüíÄ", reply_markup=markup)

# –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –§–ò–û
@dp.message_handler(text = ["–í–æ–π—Ç–∏\–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"], state=None)
async def PersonalAccount(message: types.Message, state: FSMContext):
    keyboard = [[types.KeyboardButton("–û—Ç–º–µ–Ω–∞")]]
    markup = types.ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)
    await bot.send_message(message.from_user.id, "–î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è, –ø—Ä–∏–¥—É–º–∞–π —Å–≤–æ–π –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–∏–∫–Ω–µ–π–ºüòé", reply_markup=markup)
    await Registration.fullname_registration.set()

# –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ù–û–ú–ï–†–ê
@dp.message_handler(state=Registration.fullname_registration)
async def get_fullname(message: types.Message, state: FSMContext):
    if database.check_fullname(message.text):
        keyboard = [[types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä", request_contact=True)],
                    [types.KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]]
        markup = types.ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)
        await state.update_data(fullname=message.text)
        await bot.send_message(message.from_user.id, "–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!üòÉ\n–ù–∞–º –Ω—É–∂–Ω—ã —Ç–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ãüòóüëâüëà", reply_markup=markup)
        await Registration.phone_registration.set()
    else:
        await bot.send_message(message.from_user.id, text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–∏–∫–Ω–µ–π–º –∑–∞–Ω—è—Çüò•\n–ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –Ω–∏–∫")

# –ó–ê–í–ï–†–®–ï–ù–ò–ï –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò
@dp.message_handler(content_types=types.ContentType.CONTACT, state=Registration.phone_registration)
async def get_phone(message: types.Message, state: FSMContext):
    keyboard = [[types.KeyboardButton("–ü–æ—Å–µ—Ç–∏—Ç—å –Ω–∞—à —Å–∞–π—Çüòä", web_app=WebAppInfo(url=WEB_APP))],
                [types.KeyboardButton("–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")]]
    markup = types.ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)
    inline_keyboard = [types.InlineKeyboardButton("–û –Ω–∞—Å", callback_data="About"),
                        types.InlineKeyboardButton("–û –∫—É—Ä—Å–∞—Ö", callback_data="Courses")]
    inline_markup = types.InlineKeyboardMarkup()
    inline_markup.add(inline_keyboard[0], inline_keyboard[1])
    await state.update_data(phone_number=message.contact)
    data = await state.get_data()
    await bot.send_message(message.from_user.id, f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n–ë—É–¥–µ–º –Ω–∞ —Å–≤—è–∑–∏ {data.get('fullname')}üòâ", reply_markup=markup)
    await bot.send_photo(message.from_user.id, photo=MESSAGE["Continue"]["url"], caption=MESSAGE["Continue"]["caption"], reply_markup=inline_markup)
    database.new_student(data.get("fullname"), message.from_user.id, data.get("phone_number")["phone_number"])
    await state.finish()
# ---------------------------------------------------

# –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
@dp.message_handler(text=["–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"])
async def personal_account(message: types.Message):
    info = database.show_student(message.from_user.id)[0]
    await bot.send_message(message.from_user.id,
    f"""–í–∞—à –Ω–∏–∫: {info[0]}
–í–∞—à –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {info[2]}
–í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω: {info[3]}
–ü—Ä–æ–π–¥–µ–Ω–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è: {info[4]}
–û–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è: {info[5]}
    """)
# ----------------------------------------------------------------

# –ö –û –ú –ê –ù –î –´
# /start - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –ü–û–°–ï–¢–ò–¢–¨ –ù–ê–® –°–ê–ô–¢
@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    keyboard = [[types.KeyboardButton("–ü–æ—Å–µ—Ç–∏—Ç—å –Ω–∞—à —Å–∞–π—Çüòä", web_app=WebAppInfo(url=WEB_APP))]]
    IsANewUser = database.check_fullname(message.from_user.id, tg_id = True)
    if IsANewUser:
        keyboard.append([types.KeyboardButton("–í–æ–π—Ç–∏\–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")])
        print(0)
    else:
        keyboard.append([types.KeyboardButton("–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")])
        print(1)
    markup = types.ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

    inline_keyboard = [types.InlineKeyboardButton("–û –Ω–∞—Å", callback_data="About"),
                        types.InlineKeyboardButton("–û –∫—É—Ä—Å–∞—Ö", callback_data="Courses")]
    inline_markup = types.InlineKeyboardMarkup()
    inline_markup.add(inline_keyboard[0], inline_keyboard[1])
    await bot.send_photo(message.from_user.id,
                         photo=MESSAGE["Hi"]["url"],
                         caption=MESSAGE["Hi"]["caption"],
                         reply_markup=inline_markup)
    await bot.send_message(message.from_user.id, "–ö—Å—Ç–∞—Ç–∏! –ú—ã —Å–¥–µ–ª–∞–ª–∏ —Å–∞–π—Ç, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–≥–ª—è–Ω–∏ –∫ –Ω–∞–ºüòÑ", reply_markup=markup)

# /about - –ö–∞—Ä—Ç–æ—á–∫–∏ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø–ª—é—Å–æ–≤ —à–∫–æ–ª—ã
@dp.callback_query_handler(text=["About"])
@dp.message_handler(commands=["about"])
async def about(message: types.Message):
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏
    photos = [
        types.InputMediaPhoto(media=CARDS[0]),
        types.InputMediaPhoto(media=CARDS[1]),
        types.InputMediaPhoto(media=CARDS[2]),
    ]
    keyboard = types.InlineKeyboardButton(text="–ù–∞—à–∏ –∫—É—Ä—Å—ã", callback_data="Courses")
    markup = types.InlineKeyboardMarkup()
    markup.add(keyboard)
    await bot.send_media_group(chat_id=message.from_user.id, media=photos)
    await bot.send_message(message.from_user.id, "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", reply_markup=markup)

# /courses - –°–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤
@dp.callback_query_handler(lambda c: c.data == "Courses")
@dp.message_handler(commands=["courses"])
async def about(message: types.Message):
    keyboard = [[types.InlineKeyboardButton(text="Python", callback_data="Python")],
                [types.InlineKeyboardButton(text="Construct", callback_data="Construct")]]
    markup = types.InlineKeyboardMarkup()
    markup.add(keyboard[0][0], keyboard[1][0])
    await bot.send_photo(message.from_user.id, photo = MESSAGE["Choice"]["url"], reply_markup=markup)

# /courses –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫
@dp.callback_query_handler(lambda c: c.data in ('Python', "Construct"))
async def courses(data: types.CallbackQuery):
    keyboard = [
        types.InlineKeyboardButton(text="Python", callback_data="Python"),
        types.InlineKeyboardButton(text="Construct", callback_data="Construct"),
        types.InlineKeyboardButton(text="–ü—Ä–æ–π—Ç–∏ –∑–∞–Ω—è—Ç–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ!", callback_data="Trial"),
        types.InlineKeyboardButton(text="–í–∑—è—Ç—å –∫—É—Ä—Å", callback_data="Buy")
        
    ]
    markup = types.InlineKeyboardMarkup()
    markup.add(keyboard[0], keyboard[1])
    markup.add(keyboard[2])
    markup.add(keyboard[3])
    await bot.edit_message_media(
        media=types.InputMediaPhoto(
            media=MESSAGE[data.data]["url"],
            caption=MESSAGE[data.data]["caption"]
        ),
        chat_id=data.message.chat.id,
        message_id=data.message.message_id,
        reply_markup=markup
    )

# –ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–æ–±–Ω–∏–∫
@dp.callback_query_handler(lambda call: call.data == "Trial")
async def courses(call: types.CallbackQuery):
    IsANewUser = database.check_fullname(call.from_user.id, tg_id = True)
    if not(IsANewUser):
        await bot.edit_message_media(
            media=types.InputMediaPhoto(
                media=MESSAGE["Trial"]["url"],
                caption=MESSAGE["Trial"]["caption"]
            ),
            chat_id=call.message.chat.id,
            message_id=call.message.message_id
        )
        print(database.get_admin())
        await bot.send_message(choice(database.get_admin())[0], f"–ù–æ–º–µ—Ä —É—á–µ–Ω–∏–∫–∞: {database.get_student(call.from_user.id)[0][3]}\n")
    else:
        keyboard = [[types.KeyboardButton("–û—Ç–º–µ–Ω–∞")]]
        markup = types.ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)
        await bot.send_message(call.from_user.id, "–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ãüò•\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?", reply_markup=markup)
        await Registration.fullname_registration.set()
# ----------------------------------------------------------------

# –ü –† –ï –ü –û –î –ê –í –ê –¢ –ï –õ –¨
# –í–≤–æ–¥ –ø–∞—Ä–æ–ª—è
@dp.message_handler(text=["rsat200123"], state=None)
async def teacher_password(message, state: FSMContext):
    inline_keyboard = types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞",callback_data="cancel")
    inline_markup = types.InlineKeyboardMarkup()
    inline_markup.add(inline_keyboard)
    await bot.send_message(message.from_user.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É Restudy. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û", reply_markup=inline_markup)
    await TeacherRegistration.name.set()

# –í–≤–æ–¥ –∏–º–µ–Ω–∏
@dp.message_handler(content_types=["text"], state=[TeacherRegistration.name])
async def teacher_password(message, state: FSMContext):
    inline_keyboard = types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞",callback_data="cancel")
    inline_markup = types.InlineKeyboardMarkup()
    inline_markup.add(inline_keyboard)
    if database.check_teachers_id(message.from_user.id):
        await bot.send_message(message.from_user.id, "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        await state.finish()
    elif database.check_teachers_name(message.text):
        await bot.send_message(message.from_user.id, "–ò–º—è –∑–∞–Ω—è—Ç–æ, –Ω–∞–ø–∏—à–∏—Ç–µ –¥—Ä—É–≥–æ–µ", reply_markup=inline_markup)
    else:
        await bot.send_message(message.from_user.id, f"–ì–æ—Ç–æ–≤–æ! –†–∞–¥—ã –∑–Ω–∞–∫–æ–º—Å—Ç–≤—É {message.text}\n–¢–µ–ø–µ—Ä—å –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å")
        database.add_teacher(message.text, message.from_user.id)
        await state.finish()
# ----------------------------------------------------------------

# –ö –£ –† –ê –¢ –û –†
# –ü—Ä–∞–≤–∞ –∫—É—Ä–∞—Ç–æ—Ä–∞(–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)
@dp.message_handler(text=[PASSWORD])
async def admin(message: types.Message):
    database.add_admin(message.from_user.id)
    await bot.send_message(message.from_user.id, f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Äüòä\n–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–±–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏—è—Ö")

# –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è —É—á–µ–Ω–∏–∫—É
@dp.message_handler(commands=["assign"], state=None)
async def choose_teacher(message, state: FSMContext):
    admins = [i[0] for i in database.get_admins()]
    print(admins)
    if str(message.from_user.id) in admins:
        inline_keyboard = [types.InlineKeyboardButton(text=teacher[0],callback_data=teacher[0]) for teacher in database.all_teachers()]
        inline_markup = types.InlineKeyboardMarkup()
        for i in inline_keyboard:
            inline_markup.add(i)
        inline_markup.add(types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞",callback_data="cancel"))
        await state.set_state(AssignTeacher.student)
        await bot.send_message(message.from_user.id, "–ö–∞–∫–æ–º—É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é –Ω–∞–∑–Ω–∞—á–∏—Ç—å —É—á–µ–Ω–∏–∫–∞?", reply_markup=inline_markup)

# –í—ã–±—Ä–∞—Ç—å —É—á–µ–Ω–∏–∫–∞
@dp.callback_query_handler(lambda call: True, state=AssignTeacher.student)
async def choose_student(call: types.CallbackQuery, state: FSMContext):
    if call.data in [student[0] for student in database.all_teachers()]:
        message_id = call.message.message_id
        await state.update_data(teachers_name=call.data)
        inline_keyboard = [types.InlineKeyboardButton(text=student[0],callback_data=student[0]) for student in database.students_without_teacher()]
        inline_markup = types.InlineKeyboardMarkup()
        for i in inline_keyboard:
            inline_markup.add(i)
        inline_markup.add(types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞",callback_data="cancel"))
        await bot.edit_message_text(chat_id=call.from_user.id, message_id=message_id, text = f"–í—ã–±–µ—Ä–∏ —É—á–µ–Ω–∏–∫–∞ –¥–ª—è {call.data}",reply_markup=inline_markup)
        await state.set_state(AssignTeacher.end)

@dp.callback_query_handler(lambda call: True, state=AssignTeacher.end)
async def end(call, state: FSMContext):
    teachers_name = await state.get_data()
    teachers_name = teachers_name["teachers_name"]
    database.assign_teacher(teachers_name, call.data)
    await bot.send_message(call.from_user.id, f"–ì–æ—Ç–æ–≤–æ! –£—á–µ–Ω–∏–∫ {call.data} –Ω–∞–∑–Ω–∞—á–∞–µ—Ç—Å—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é {teachers_name}")
    await state.finish()

# –° –î –ê –¢ –¨   –û –¢ –ß –ï –¢
# –í—ã–≤–æ–¥ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ –æ—Ç—á–µ—Ç—É –∑–∞ –∑–∞–Ω—è—Ç–∏–µ
@dp.message_handler(commands=["mystudents"])
async def mystudents(message, state: FSMContext):
    if database.check_teachers_id(message.from_user.id):
        teacher_id = message.from_user.id
        teachers_name = database.get_teacher(teacher_id)
        print(teachers_name)
        inline_keyboard = [types.InlineKeyboardButton(text=student[0],callback_data=student[0]) for student in database.teachers_students(teachers_name)]
        inline_markup = types.InlineKeyboardMarkup()
        await state.set_state(FinishLesson.complete)
        for i in inline_keyboard:
            inline_markup.add(i)
        inline_markup.add(types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞",callback_data="cancel"))
        await bot.send_message(teacher_id, "–¢–≤–æ–∏ —É—á–µ–Ω–∏–∫–∏:", reply_markup=inline_markup)

@dp.callback_query_handler(lambda call: True, state=FinishLesson.complete)
async def fisnish_lesson(call: types.CallbackQuery, state: FSMContext):
    teachers_name = database.get_teacher(call.from_user.id)
    if call.data in [student[0] for student in database.teachers_students(teachers_name)]:
        inline_markup = types.InlineKeyboardMarkup()
        inline_markup.add(types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞",callback_data="cancel"))
        await state.set_state(FinishLesson.about)
        await state.update_data(fullname=call.data)
        await bot.send_message(call.from_user.id, f"{call.data}\n–ß—Ç–æ —Å–µ–≥–æ–¥–Ω—è –ø—Ä–æ—Ö–æ–¥–∏–ª–∏?üòÑ", reply_markup=inline_markup)

# –í –æ—Ç—á–µ—Ç –≤–≤–æ–¥–∏—Ç—Å—è –æ —á–µ–º –±—ã–ª–æ –∑–∞–Ω—è—Ç–∏–µ
@dp.message_handler(content_types=["text"], state=FinishLesson.about)
async def about(message, state: FSMContext):
    data = await state.get_data()
    students_name = data.get('fullname')
    database.complete_lesson(students_name, database.get_teacher(message.from_user.id), message.text)
    can_i_teach_you = database.is_lesson_paid(students_name)
    await bot.send_message(message.from_user.id, f"–û—Ç–ø—Ä–∞–≤–∏–ª–∏ –æ—Ç—á–µ—Ç –≤ –∫–æ—Å–º–æ—ÅüëΩ")
    if not(can_i_teach_you):
        await bot.send_message(database.get_student(students_name)[0][1], f"–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—èüòø\n–í—ã –º–æ–∂–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –Ω–æ–≤—ã–π –º–µ—Å—è—Ü –ø–æ –∫–æ–º–∞–Ω–¥–µ /pay")
        await bot.send_message(message.from_user.id, f"–ê–•–¢–£–ù–ì! –£ —É—á–µ–Ω–∏–∫–∞ {students_name} –∫–æ–Ω—á–∏–ª–∏—Å—å –∑–∞–Ω—è—Ç–∏—è. –°–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–º –∫—É—Ä–∞—Ç–æ—Ä—É")
    await state.finish()

# –ü –û –õ –£ –ß –ò –¢ –¨   –û –¢ –ß –ï –¢
# –û—Ç—á–µ—Ç –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞ –º–µ—Å—è—Ü
@dp.message_handler(commands=["report"])
async def report(message):
    admins = [i[0] for i in database.get_admins()]
    if str(message.from_user.id) in admins:
        lessons = database.report("administrator")
        if lessons != "":
            await bot.send_message(message.from_user.id, f"{lessons}")
        else:
            await bot.send_message(message.from_user.id, "–û–π, –ø–æ–∫–∞ –∑–∞–Ω—è—Ç–∏–π –Ω–µ –±—ã–ª–æüçÉ")

# –û—Ç—á–µ—Ç –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∑–∞ –º–µ—Å—è—Ü
@dp.message_handler(commands=["myreport"])
async def report(message):
    if database.check_teachers_id(message.from_user.id):
        lessons = database.report("teacher", message.from_user.id)
        if lessons:
            await bot.send_message(message.from_user.id, f"{lessons}")
        else:
            await bot.send_message(message.from_user.id, "–û–π, —É —Ç–µ–±—è –Ω–µ –±—ã–ª–æ –∑–∞–Ω—è—Ç–∏–π –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ‚õ±")
    else:
        print("–ü–æ–ø—ã—Ç–∫–∞")    

@dp.message_handler(commands=["allstudents"])
async def allstudents(message):
    admins = [i[0] for i in database.get_admins()]
    if str(message.from_user.id) in admins:
        all_students =" \n".join([str(student) for student in database.all_students()])
        if all_students != "":
            await bot.send_message(message.from_user.id, all_students)
        else:
            await bot.send_message(message.from_user.id, "–£–ø—Å–µ–Ω—å, —É—á–µ–Ω–∏–∫–æ–≤ –Ω—ç—Çüêõ")

@dp.message_handler(commands=["check"], state=None)
async def check(message):
    await bot.send_message(message.from_user.id, database.show_database())
# --------------------------------------------------------

# –û –ü –õ –ê –¢ –ê   –ö –£ –† –° –û –í
# –û–ø–ª–∞—Ç–∞ –º–µ—Å—è—Ü–∞ –∑–∞–Ω—è—Ç–∏–π
@dp.callback_query_handler(text=["Buy"])
@dp.message_handler(commands=["pay"])
async def buy(message: types.Message):
    print(0)
    if PAYMENTS_TOKEN.split(':')[1] == 'TEST':
        await bot.send_message(message.from_user.id, "–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂!!!")
    await bot.send_invoice(message.from_user.id,
        title = "–û–ø–ª–∞—Ç–∞ –æ–±—É—á–µ–Ω–∏—è",
        description="–¶–µ–ª—ã–π –º–µ—Å—è—Ü –∑–∞–Ω—è—Ç–∏–π!",
        provider_token = PAYMENTS_TOKEN,
        currency = "rub",
        photo_url = "https://i.imgur.com/22IdLjg.jpg",
        photo_width = 416,
        photo_height = 234,
        photo_size = 416,
        is_flexible = False,
        prices = [PRICE, PRICE2, PRICE3],
        start_parameter = "one-month-subscription",
        payload = "test-invoice-payload")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞
@dp.pre_checkout_query_handler(lambda query: True)
async def pre_checkout_query(pre_checkout_q: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)

# check succesful payment
@dp.message_handler(content_types=ContentType.SUCCESSFUL_PAYMENT)
async def successful_payment(message: types.Message):
    print("SUCCESSFUL PAYMENT:")
    payment_info = message.successful_payment.to_python()
    for k, v in payment_info.items():
        print(f"{k} = {v}")
    database.payment(message.from_user.id)
    await bot.send_message(message.from_user.id,
                           f"–ü–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É {message.successful_payment.total_amount // 100} {message.successful_payment.currency} –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!!!")

class RemoveStudent(StatesGroup):
    student = State()
    end = State()
# –°–Ω—è—Ç–∏–µ —É—á–µ–Ω–∏–∫–∞ —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
@dp.message_handler(commands=["removestudent"])
async def remove_student_0(message: types.Message, state: FSMContext ):
    inline_keyboard = [types.InlineKeyboardButton(text=teacher[0],callback_data=teacher[0]) for teacher in database.all_teachers()]
    inline_markup = types.InlineKeyboardMarkup()
    for i in inline_keyboard:
        inline_markup.add(i)
    inline_markup.add(types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞",callback_data="cancel"))
    await bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã —Å–Ω—è—Ç—å —É –Ω–µ–≥–æ —É—á–µ–Ω–∏–∫–∞", reply_markup=inline_markup)
    await state.set_state(RemoveStudent.student)

@dp.callback_query_handler(state=RemoveStudent.student)
async def remove_student_1(call: types.CallbackQuery, state: FSMContext):
    inline_keyboard = [types.InlineKeyboardButton(text=student[0],callback_data=student[0]) for student in database.teachers_students(call.data)]
    inline_markup = types.InlineKeyboardMarkup()
    for i in inline_keyboard:
        inline_markup.add(i)
    inline_markup.add(types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞",callback_data="cancel"))
    await bot.send_message(call.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞, —á—Ç–æ–±—ã —Å–Ω—è—Ç—å –µ–≥–æ —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è", reply_markup=inline_markup)
    await state.set_state(RemoveStudent.end)

@dp.callback_query_handler(state=RemoveStudent.end)
async def remove_student_2(call: types.CallbackQuery, state: FSMContext):
    await bot.send_message(call.from_user.id, "–£—á–µ–Ω–∏–∫ —Å–Ω—è—Ç —Å —É—á–∏—Ç–µ–ª—è")
    database.remove_students_teacher(call.data)
    await state.finish()

class RemoveTeacher(StatesGroup):
    choice = State()

@dp.message_handler(commands=["removeteacher"])
async def remove_teacher_0(message: types.Message, state: FSMContext):
    inline_keyboard = [types.InlineKeyboardButton(text=teacher[0],callback_data=teacher[0]) for teacher in database.all_teachers()]
    inline_markup = types.InlineKeyboardMarkup()
    for i in inline_keyboard:
        inline_markup.add(i)
    inline_markup.add(types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞",callback_data="cancel"))
    await bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–Ω—è—Ç–∏—è —Å —Ä–∞–±–æ—Ç—ã", reply_markup=inline_markup)
    await state.set_state(RemoveTeacher.choice)

@dp.callback_query_handler(state=RemoveTeacher.choice)
async def remove_teacher_1(call: types.CallbackQuery, state: FSMContext):
    await bot.send_message(call.from_user.id, f"{call.data} —Å–Ω—è—Ç —Å —Ä–∞–±–æ—Ç—ã")
    database.remove_teacher(call.data)
    await state.finish()